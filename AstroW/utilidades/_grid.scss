

@use 'sass:math';
@use 'breakpoints' as *;


$grid-columns: 12;

//FLEX FELX FLEX FLEX FLEX

$justify-content-values: flex-start, flex-end, center, space-between, space-around, space-evenly;

$flex-directions-values: row, column, row-reverse, column-reverse;

$align-items-values: flex-start, flex-end, center, baseline, stretch;



//clases para justify content
@each $value in $justify-content-values{

    .justify-#{$value}{
        justify-content: $value;
    }
}

//calses poara flex directions
@each $value in $flex-directions-values{
    .flex-dir-#{$value}{
        
        flex-direction: $value;
    }
}

// Clases responsive
@each $bp-name, $bp-value in $breakpoints {
    @if $bp-value > 0 {
      @include respond-to($bp-name) {
        @each $direction in $flex-directions-values {
          .#{$bp-name}\:flex-#{$direction} {
            flex-direction: $direction;
          }
        }
      }
    }
  }

//clases para aling-items, align-self and align-content ya que tienen los mismos valores
@each $value in $align-items-values{

    .ai-#{$value}{
        align-items: $value;
    }

    .ac-#{$value}{
        align-content: $value;
    }

    .as-#{$value}{
        align-self: $value;
    }
}
//propiedades para elementos flex
.flex-1{
    flex: 1;
}

//clases para order
@for $i from 1 through $grid-columns{
    .order-#{$i}{
        order: #{$i};
    }
}



.row {

    display: flex;
    flex-wrap: wrap;
}






@for $i from 1 through $grid-columns{
    .col-#{$i}{
        box-sizing: border-box;
        flex-grow: 0;
        width: math.div($i * 100%, $grid-columns);
    }
}


//NUEVA IMPLEMENTACION PARA LOS MIXINS CON BREAKPOINTS
@each $bp-name, $bp-value in $breakpoints {
    @if $bp-value > 0 {
        @include respond-to($bp-name) {
            @for $i from 1 through $grid-columns{
                .#{$bp-name}\:col-#{$i}{
                    box-sizing: border-box;
                    flex-grow: 0;
                    width: math.div($i * 100%, $grid-columns);
                }
            }
        }
    }
}

//clases utiles para flex


//FIN FLEXXX

$gap-map: (
  "0": 0,
  "1": 0.25rem,
  "2": 0.5rem,
  "3": 0.75rem,
  "4": 1rem,
  "5": 1.5rem,
  "6": 3rem,
  "auto": auto,
)!default;

$gap-atajos: (
  "gap": "g",
)!default;


  //para general las clases con la propiedad gap, solo se aplicara a elementos flex o grid pero en este caso flex ya que de momento no hay gird
@each $propiedad, $atajo in $gap-atajos {
  @each $key, $value in $gap-map{
    
    .#{$atajo}-#{$key}{
      #{$propiedad}: #{$value};

    }

  }
}


//soporte para grid

//grid container
.grid {
    display: grid;
    gap: 1rem; // gap base, se puede sobreescribir con clases
  }
  
  //columnas del grid
  @for $i from 1 through 12 {
    .grid-cols-#{$i} {
      grid-template-columns: repeat(#{$i}, 1fr);
    }
  
    .col-span-#{$i} {
      grid-column: span #{$i} / span #{$i};
    }
  }
  
  
  @for $i from 1 through 6 {
    .grid-rows-#{$i} {
      grid-template-rows: repeat(#{$i}, 1fr);
    }
  
    .row-span-#{$i} {
      grid-row: span #{$i} / span #{$i};
    }
  }
  

  
@mixin generar-grid-classes($prefix : "") {
    
    @for $i from 1 through 12 {
        .#{$prefix}grid-cols-#{$i} {
          grid-template-columns: repeat(#{$i}, 1fr);
        }
    
        .#{$prefix}col-span-#{$i} {
          grid-column: span #{$i} / span #{$i};
        }
    }
    
    @for $i from 1 through 6 {
        .#{$prefix}grid-rows-#{$i} {
          grid-template-rows: repeat(#{$i}, 1fr);
        }
    
        .#{$prefix}row-span-#{$i} {
          grid-row: span #{$i} / span #{$i};
        }
    }
    
    @each $key, $value in $gap-map {
        .#{$prefix}gap-#{$key} {
          gap: #{$value};
        }
    }
}



// Responsive grid utilizando respond-to para cada breakpoint
@each $bp-name, $bp-value in $breakpoints {
    @if $bp-value > 0 {
        @include respond-to($bp-name) {
            @include generar-grid-classes("#{$bp-name}\\:");
        }
    }
}
  